name: Release and Publish Python Package

# Trigger the workflow on any push event that includes tags matching 'v*',
# which typically represents version tags (e.g., v1.0.0).
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write  # Allows writing to the repository's contents, such as creating releases
  id-token: write  # Allows requesting OIDC tokens

jobs:
  release-publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      # - This action checks out the repository code so that it can be accessed by the workflow.
      - uses: actions/checkout@v4

      # Step 2: Set up Python environment
      # - This action sets up a specified version of Python, in this case, Python 3.x.
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # Step 3: Install Poetry
      # - Poetry is a dependency management tool for Python. This step installs Poetry
      #   by fetching and running its official installation script.
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"          

      # Step 4: Configure Poetry
      # - This configures Poetry to create virtual environments within the project directory.
      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true          

      # Step 5: Install dependencies
      # - Installs the project's dependencies as specified in the pyproject.toml file.
      # - The '--no-root' option ensures that the package itself is not installed,
      #   only the dependencies are.
      - name: Install dependencies
        run: |
          poetry install --no-root          

      # Step 6: Build release distributions
      # - This uses Poetry to build the source and wheel distributions of the package,
      #   which are saved in the 'dist/' directory.
      - name: Build release distributions
        run: |
          poetry build          

      # Step 7: Create GitHub Release
      # - This step creates a new GitHub release based on the tag that triggered the workflow.
      # - It uses the 'actions/create-release' action to automate this process.
      - name: Create GitHub Release
        id: create_release  # 添加这个 ID 以便在后续步骤中引用输出
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub automatically provides this token
        with:
          tag_name: ${{ github.ref_name }}  # Uses the tag that triggered the workflow
          release_name: "Release ${{ github.ref_name }}"  # Names the release after the tag
          draft: false  # Indicates the release should not be a draft
          prerelease: false  # Indicates the release should not be marked as a prerelease

#      - name: Debug Create Release
#        run: |
#          export
#          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/prometheus_remote_writer-*.whl
          asset_name: prometheus_remote_writer-${{ github.ref_name }}.whl
          asset_content_type: application/zip

      - name: Upload Source Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/prometheus_remote_writer-*.tar.gz
          asset_name: prometheus_remote_writer-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      # Step 8: Publish release distributions to PyPI
      # - This step uploads the built distributions to PyPI using the 'pypa/gh-action-pypi-publish' action.
      # - PYPI_TOKEN is a secret that you must add to your GitHub repository settings.
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/  # The directory containing the built distributions
